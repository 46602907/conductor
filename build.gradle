import nl.javadude.gradle.plugins.license.License

buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }

    dependencies {
        classpath 'com.netflix.nebula:gradle-extra-configurations-plugin:4.0.1'
        classpath 'org.apache.ant:ant:1.9.7'
    }
}

plugins {
    id 'nebula.netflixoss' version '8.6.0'
    id 'com.github.kt3k.coveralls' version '2.8.2'
}

apply plugin: 'project-report'
apply from: "$rootDir/versionsOfDependencies.gradle"

allprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'jacoco'
    apply plugin: 'eclipse'

    repositories {
        jcenter()

        // oss-candidate for -rc.* verions:
        maven {
            url "https://dl.bintray.com/netflixoss/oss-candidate"
        }
    }
}

def javaProjects = subprojects.findAll {
    it.name != "ui"
}

configure(javaProjects) {
    apply plugin: 'nebula.netflixoss'
    apply plugin: 'java'
    apply plugin: 'project-report'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    dependencies {
        testImplementation "junit:junit:${revJUnit}"
        testImplementation("org.mockito:mockito-core:${revMockito}") {
            exclude group: 'org.hamcrest', module: 'hamcrest-core'
        }
    }

    //group = "com.netflix.${githubProjectName}"

    tasks.withType(Test) {
        maxParallelForks = 100
    }

    license {
        excludes(['**/*.txt', '**/*.conf', '**/*.properties', '**/*.json', '**/swagger-ui/*'])
    }

    task licenseFormatTests(type: License) {
        source = fileTree(dir: "src/test").include("**/*")
    }
    licenseFormat.dependsOn licenseFormatTests


    tasks.withType(Test) {
        task ->
            // set heap size for the test JVM(s)
            minHeapSize = "256m"
            maxHeapSize = "2g"

//            jacocoTestReport.executionData += files("$buildDir/jacoco/${task.name}.exec")
    }

    jacocoTestReport {
        reports {
            html.enabled = true
            xml.enabled = true
            csv.enabled = false
        }
    }
}

/**********************************
 * Coverage Tasks
 **********************************/
task codeCoverageReport(type: JacocoReport, group: "Coverage reports") {
    executionData.setFrom(fileTree(dir: project.rootDir.absolutePath, includes: ["**/build/jacoco/*.exec"]))
    dependsOn subprojects*.test

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled = true
        xml.destination new File("${buildDir}/reports/jacoco/report.xml")
        html.enabled = true
        html.destination new File("${buildDir}/reports/jacoco/html")
        csv.enabled = false
    }
    afterEvaluate {
        // Exclude generated files from top-level coverage report
        classDirectories.from = files(
                classDirectories.files.collect {
                    fileTree(
                            dir: it,
                            // Exclude es modules from code coverage reports
                            exclude: 'com/netflix/conductor/elasticsearch'
                    )
                }
        )
    }
}

coveralls {
    sourceDirs = subprojects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "${project.buildDir}/reports/jacoco/report.xml"
}

tasks.coveralls {
    group = "Coverage reports"
    description = "Uploads the aggregated coverage report to Coveralls"
    dependsOn codeCoverageReport
}
