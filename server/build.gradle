buildscript {
    dependencies {
        classpath "org.akhikhl.gretty:gretty:1.2.4"
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '5.2.0'
}

configurations.all {
    resolutionStrategy {
        force "com.fasterxml.jackson.core:jackson-core:${revJacksonCore}"
        force "com.fasterxml.jackson.core:jackson-databind:${revJacksonDatabind}"
        force "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:${revJaxrsJackson}"
    }
}

apply plugin: 'war'
apply plugin: "org.akhikhl.gretty"

dependencies {

    //Conductor
    implementation project(':conductor-core')
    implementation project(':conductor-jersey')
    implementation project(':conductor-redis-persistence')
    implementation project(':conductor-mysql-persistence')
    implementation project(':conductor-postgres-persistence')
    implementation project(':conductor-cassandra-persistence')
    implementation project(':conductor-contribs')
    implementation project(':conductor-es6-persistence')
    implementation project(':conductor-grpc-server')
    implementation project(':conductor-zookeeper-lock')
    implementation project(':conductor-redis-lock')

    implementation "com.netflix.runtime:health-guice:${revHealth}"

    //Jetty
    implementation "org.eclipse.jetty:jetty-server:${revJetteyServer}"
    implementation "org.eclipse.jetty:jetty-servlet:${revJettyServlet}"
    implementation "org.eclipse.jetty:jetty-jmx:${revJettyServlet}"

    //Guice
    implementation "com.sun.jersey.contribs:jersey-guice:${revJerseyGuice}"
    implementation "com.google.inject:guice:${revGuice}"
    implementation "com.google.inject.extensions:guice-servlet:${revGuiceServlet}"

    //Swagger
    implementation "io.swagger:swagger-jersey-jaxrs:${revSwagger}"
}

shadowJar {
    mergeServiceFiles()
    configurations = [project.configurations.compile]
    manifest {
        attributes 'Description': 'Self contained Conductor server jar'
        attributes 'Main-Class': 'com.netflix.conductor.bootstrap.Main'
    }
}
publishing {
    publications {
        nebula(MavenPublication) {
            artifact shadowJar
        }
    }
}

gretty {
    contextPath = '/'
    servletContainer = 'tomcat8'
    scanDirs = ['**/src/main/resources/**']
    scanDependencies = true
    port = 8080
    // More properties can be found here:
    // http://akhikhl.github.io/gretty-doc/Gretty-configuration.html
}
configurations.grettyRunnerTomcat8 {
    exclude group: 'org.slf4j', module: 'log4j-over-slf4j'
}


build.dependsOn('shadowJar')

task server(type: JavaExec) {
    systemProperty 'workflow.elasticsearch.url', 'localhost:9300'
    // Switch between Elasticsearch versions 2 & 5 with major version number.
    systemProperty 'loadSample', 'true'
    // Unlink Jetty logger to reduce clutter in local server.
    systemProperty 'org.eclipse.jetty.util.log.class', 'org.eclipse.jetty.util.log.StdErrLog'
    // Set Jetty logger level to INFO.
    systemProperty 'org.eclipse.jetty.LEVEL', 'INFO'
    systemProperties System.properties
    main = 'com.netflix.conductor.bootstrap.Main'
    args  'src/main/resources/server.properties', 'src/main/resources/log4j.properties'
    classpath = sourceSets.test.runtimeClasspath
}
